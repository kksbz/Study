using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WhatIsInterface
{
    internal class Description2
    {
        public void ObjectOrientedProgramming()
        {
            /**
             * c#은 객체 지향 프로그래밍이라는 캡슐화, 상속, 다형성, 추상화 등 개념을 제공한다.
             * 
             * 객체 지향 프로그래밍 소개하기
             * 현재까지, 현업에서 가장 많이 사용하는 프로그램 작성 기법은
             * 객체 지향 프로그래밍(Object Oriented Programming)이다.
             * 객체 지향 프로그래밍은 OOP로 줄여서 표현한다.
             * 객체 지향 프로그래밍의 가장 큰 특징은 클래스를 이용해 함수(처리 부분),
             * 변수(데이터 부분)를 하나로 묶어 객체(인스턴스)로 만들어 사용한다는 점입니다.
             * 
             * 객체 지향 프로그래밍의 목적은 다음과 같다.
             * - 프로그램을 분석하기 쉬워진다.
             * - 프로그램 유지보수가 쉬워진다.
             * - 프로그램의 특정 기능을 재사용할 수 있다.
             * 
             * 객체 지향 프로그래밍이라는 것은 학술적인 의미를 가지는 것이며, 만능은 아니다.
             * Tip: c#에서 클래스와 객체는 명사로 표현하고, 속성은 명사 또는 형용사,
             * 메서드는 동사의 의미가 있다.
             * 
             * 개체(Object)
             * 클래스를 사용하여 새로운 형식을 정의하고, 개체는 데이터와 기능을 숨기는
             * 캡슐화(Encapsulation)기능을 제공한다.
             * 
             * 개체에는 다음과 같은 세 가지 개념이 있다.
             * - (is something) 무엇이 된다.
             * - (has data) 데이터를 가진다. -> 변수
             * - (performs action) 기능을 수행한다. -> 함수
             * 
             * 객체 지향 프로그래밍의 네 가지 큰 개념
             * 객체 지향 프로그래밍(OOP)에는 네 가지 큰 핵심 개념이 있는데,
             * 추상화(Abstraction), 캡슐화(Encapsulation), 상속(Inheritance), 다형성(Polymorphism)이 그것이다.
             * 
             * 추상화(Abstraction)
             * 추상화는 인터페이스 또는 추상 클래스에서 상속받아 구현하는 설계 관련 개념이다.
             * 
             * 캡슐화(Encapsulation)
             * 필드는 특별한 경우가 아니면 private으로 클래스 안에서만 사용한다.
             * 필드는 꽁꽁 숨기는 것이 가장 좋다. 즉 부품 역할을 하는 필드는 가루약을 캠슐에 넣어서 관리하는 것처럼
             * 프로그래밍에서도 필드를 꽁꽁 숨기는 개념이 바로 캡슐화이다. 캡슐화는 구조화된 데이터 개체 값 또는
             * 상태를 숨겨 권한이 없으면 접근하지 못하도록 차단한다. 캡슐화의 또 다른 의미는 연관된 자료구조와
             * 메서드를 한 테두리로 묶는 것이다.
             * 원칙은 필드는 private이고 public으로 외부에 공개할 때는 속성(get, set)을 사용하는 것이다.
             * 클래스의 변수와 함수가 모두 public으로 만들어질 경우, 클래스의 고유의 객체 특성을 잃어버릴 수 있기 때문에
             * 꼭 필요한 데이터 외에는 private(내부에서만 접근 가능)로 설정해야 합니다.
             * 
             * 상속(Inheritance)
             * 부모 클래스의 멤버를 자식 클래스에서 재사용하는 개념을 상속이라고 한다.
             * 
             * 다형성(Polymorphism)
             * 특정 클래스의 메서드는 매개변수에 따라 여러 가지 다양한 형태일 수 있다.
             * 즉, 이러한 클래스의 특징을 다형성이라고 한다. -> 메서드는 오버로딩할 수 있다란 말임
             */
        } //ObjectOrientedProgramming
    }
}
