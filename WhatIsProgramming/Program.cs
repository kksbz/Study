using System;

namespace WhatIsProgramming
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
            // 한줄 주석
            /* 범위
             * 주석은 메모하고 싶을 때 쓰는 기능 영어로 Commnet
             * 주석
             */

            /*
             * -프로그래밍은 무엇인가?-
             * 컴퓨터는 하드웨어(Hardware)와 소프트웨어(Software)로 구성된다. 하드웨어는 pc, 스마트폰과 같은
             * 물리적으로 존재하는 장치를 의미함다. 소프트웨어는 이러한 하드웨어에 설치된 운영체제, 앱 등을 의미한다.
             * 
             * 프로그램(Program)이란 우리가 하고자하는 작업을 컴퓨터에게 전달하여 주는 역할을 하는 소프트웨어를 의미한다.
             * 프로그램 안에는 "무엇을 어떤 식으로 해라" 와 같은 형태의 명령어(Instruction) 들이 들어 있다.
             * 
             * 소프트웨어를 만드는 행위를 프로그래밍(Programming) 또는 코딩(Coding)이라고 한다.
             * 
             * 컴퓨터가 알아듣는 언어는 한가지 뿐이다.
             * 0과 1의 형태로 구성되어 있으며 기계어(Machine Language)라고 부른다.
             * 과거 초기 형태의 컴퓨터는 이러한 기계어를 사용하여 프로그래밍 했었다.
             * 기계어는 인간에게 상당히 불편한(난해한) 언어기 때문에 사람이 이해하기 쉬운 프로그래밍 언어가 만들어지게 된다.
             * 프로그래밍 언어의 예약어(Keyward)와 문법으로 소프트웨어를 만드는 사람을
             * 프로그래머(Programmer)또는 개발자(Developer)라고 한다.
             * 
             * 프로그래밍 언어의 문법에 맞게 작성한, 텍스트로 된 명령 집합을 코드(Code) 또는 소스(Source)라고 한다.
             * 소스코드를 기계어로 번역하는 작업을 컴파일(Compile)이라고 한다. 이러한 작업을 하는 소프트웨어를
             * 컴파일러(Compiler)라고 한다.
             * 
             * 프로그래밍을 하는 과정은 다음과 같다.
             * 1.텍스트 에디터로 소스를 작성하여 파일로 저장한다.  ex) .cs 파일 같은거
             * 2.소스파일을 컴파일하여 실행 프로그램을 생성한다.   ex) .exe 파일 같은거
             * 3.프로그램을 실행한다.
             * 이 중 1, 2 단계를 합쳐서 흔히 빌드(Build)라고 한다.
             * 
             * 프로그래밍 과정 중 발생한 오류를 버그(Bug)라고 한다.
             * 오류를 탐색하고 수정하는 과정을 디버그(Debug) 또는 디버깅(Debugging) 또는 트러블슈팅(Trouble shooting)
             * 이라고 한다.
             * 
             * c#의 경우
             * c# 언어로 코딩 -> IL(Intermediate Language)코드로 변환 -> 기계어
             * ildasm -> 도구 -> 명령줄 -> 개발자 명령 프롬프톰 이곳에 적음
             * 
             * c#의 특징
             * c#은 .Net(닷넷)을 위한 많은 언어 중 하나로, 마이크로소프트의 닷넷 플랫폼을 기반으로 한다.
             * 절차적 언어와 객체지향적 언어의 특징, 그리고 함수형 프로그래밍 스타일을 제공하는 다중 패러다임
             * 프로그래밍 언어이다.
             * 
             * c#은 C, C++, Java, Javascript와 기초 문법이 비슷하다.
             * c#은 자동으로 메모리를 관리한다. (Garbage collection 기능을 제공)
             * c#은 컴파일 기반 언어이다.
             * c#은 강력한 형식(Strongly typed)의 언어이다.
             * c#은 Generic과 LINQ 등 편리한 기능을 제공한다.
             * 
             * .Net(닷넷)
             * 닷넷 프레임워크와 닷넷 코어를 합쳐서 편하게 닷넷이라고 한다.
             * 닷넷은 소프트웨어 프레임워크로, 응용 프로그램의 개발 속도를 높이는 데 도움이 되는
             * API(Application Programming Interface) 및 서비스 모음이다.
             * 
             * 프레임워크 : 응용 프로그램의 개발 속도를 높이는 데 도움이 되는
             *              API(Application Programming Interface) 및 서비스 모음이다.
             *
             * 함수, 라이브러리, API 란?
             * 함수 : 프로그램에서 사용하기 위한 기능의 단위를 의미한다. 보통 하나의 함수는 하나의 기능을 한다.
             * 라이브러리 : 어떠한 기능을 구현할 때 도움이 되는 기능, 함수의 모음이다.
             * API : 어떠한 기능을 구현할 때 도움이 되도록 문서와 함께 제공되는 라이브러리, 함수의 모음이다.
             * 
             * 플랫폼 : 프로그램을 실행하기 위한 배경, 환경 또는 운영체제를 의미한다.
             * 
             * c#의 기본 코드 구조
             * c# 프로그램은 class와 Main() 메서드가 반드시 있어야 하고, 하나 이상의 문(Statement)이 있어야 한다.
             * c#의 기본 코드는 위쪽에 네임스페이스 선언부와 Main() 메서드가 오고, 중괄호 시작과 끝을 사용하여
             * 프로그램 범위(Scope)를 구분한다.
             * 
             * 네임스페이스 : 자주 사용하는 네임스페이스를 위쪽에 미리 선언해 둘 수 있다.
             *                중복된 class를 구분지을때 사용
             * ex)
             * namespace Monster
             * {
             *      public class slime{}
             * }
             * namespace Pet
             * {
             *      public class slime{}
             * }
             * Main() 메서드 : 프로그램의 시작 지점이며, 반드시 있어야 한다.
             * 중괄호{} : 프로그램 범위를 구분 짓는다. 소괄호()
             * 세미콜론(;) : 명령어(문, 문장)의 끝을 나타낸다. 콜론(:)
             * 
             * Main() 메서드
             * 메서드(method) : 클래스에서 제공하는 멤버 함수를 의미한다.
             * Main() 앞에 static 키워드가 있어 개체를 생성하지 않고 바로 실핼할 수 있다.
             * Main() 메서드가 2개이면 "프로그램 진입점이 2개 이상 정의되어 있습니다." 라는
             * 에러 메시지가 출력되어 프로그램이 컴파일되지 않는다.
             * 
             * 대, 소문자 구분하기
             * c#은 대, 소문자를 구분한다. 정확히 입력하지 않으면 에러가 발생한다.
             * 
             * 문법, 스타일, 패턴
             * 문법(Syntex) : 프로그래밍을 하기 위해 반드시 지켜야 하는 규칙(Rule)이다. 언어별로 다르다.
             * 스타일(Style) : 프로그래밍 가이드라인(Guideline)이다.
             *                 코드컨벤션처럼 여러가지 방식으로 쓰인 코드를 병합할때 문제가 생기니 통일
             * 패턴(Pattern) : 자주 사용하는 규칙과 스타일 모음이다.
             * 
             * 정규화된 이름
             * 정규화된 이름(Fully qualified names)은 아래와 같이 네임스페이스 이름과 형식 이름까지
             * 전체를 지정하는 방식이다.
             * System.Console.WriteLine("Hello, World!"); using System; 이없어도 console앞에 System을 붙이면 정상작동됨
             * 
             * 출력문 : 명령 프롬프트에 출력하는 구문
             * 주석문 : 실행에 영향을 주지 않는 코드 설명문
             *  - 한줄 주석. //
             *  - 여러줄 주석. /* 사이내용
             */
            Console.Write("Hello, World!");
            Console.WriteLine("Hello, World!"); //줄바꾸기
            /*
             * 들여쓰기 : 프로그램 소스 코드의 가독성을 위해서 사용하는 일반적인 들여쓰기 규칙
             *            보통 4칸의 공백(Space) 또는 Tab을 사용하지만 혼용하면 안된다.
             * 공백처리 : c#에서 명령어 사이, 기호와 괄호 사이의 공백, Tab, 줄 바꿈은 무시된다.
             */
            Console  .   WriteLine  (
                "Hello, World!"
                );
            /*
             * 이스케이프 시퀸스
             * c#은 WriteLine() 메서드에서 사용할 확장 문자를 제공하는데, 이를
             * 이스케이프 시퀸스(Escapesequence)라고 한다.
             * 역슬래쉬(\) 기호와 특정 문자를 조합하면 특별한 기능을 사용 할 수 있다.
             * 어떤 이스케이프 시퀸스가 있는지 검색하면 알 수 있다.
             */
            Console.WriteLine("Hello, World!");
            Console.WriteLine("Hello, World!");
            Console.WriteLine("Hello, World!");

            Console.Write("Hello, \t\t\tWorld! \n"); //\n : 줄바꿈 \t : Tab
            Console.WriteLine("Hello, World!");


        }
    }
}